keycloak:
  enabled: true
  ingress:
    enabled: false
  persistence:
    #to enable postgres set true and set dbVendor to postgres here and also below (not sure why twice)
    deployPostgres: false
    dbVendor: H2
  realm:
    alfresco:
      extraRealmRoles:
        - name: "ACTIVITI_USER"
        - name: "ACTIVITI_MODELER"
        - name: "ACTIVITI_ADMIN"
      extraGroups:
        - name: "hr"
        - name: "testgroup"
      extraUsers:
        - username: client
          enabled: true
          firstName: "client"
          lastName: User
          email: "client@test.com"
          credentials:
            - type: password
              value: client
          realmRoles:
            - "offline_access"
            - "uma_authorization"
            - "ACTIVITI_USER"
          clientRoles:
            account:
              - "manage-account"
              - "view-profile"
            broker:
              - "read-token"
            realm-management:
              - "manage-users"
              - "manage-clients"
              - "manage-authorization"
              - "manage-events"
              - "manage-realm"
              - "create-client"
              - "impersonation"
              - "realm-admin"
        - username: modeler
          enabled: true
          firstName: "modeler"
          lastName: User
          email: "modeler@test.com"
          credentials:
            - type: password
              value: password
          realmRoles:
            - "offline_access"
            - "uma_authorization"
            - "ACTIVITI_MODELER"
          clientRoles:
            account:
              - "manage-account"
              - "view-profile"
        - username: hruser
          enabled: true
          firstName: "hruser"
          lastName: hruser
          email: "hruser@test.com"
          credentials:
            - type: password
              value: password
          realmRoles:
            - "offline_access"
            - "uma_authorization"
            - "ACTIVITI_USER"
          clientRoles:
            account:
              - "manage-account"
              - "view-profile"
          groups:
            - "hr"
        - username: hradmin
          enabled: true
          firstName: "hradmin"
          lastName: hradmin
          email: "hradmin@test.com"
          credentials:
            - type: password
              value: password
          realmRoles:
            - "offline_access"
            - "uma_authorization"
            - "ACTIVITI_USER"
            - "ACTIVITI_ADMIN"
          clientRoles:
            account:
              - "manage-account"
              - "view-profile"
          groups:
            - "hr"
        - username: testuser
          enabled: true
          firstName: "testuser"
          lastName: testuser
          email: "testuser@test.com"
          credentials:
            - type: password
              value: password
          realmRoles:
            - "offline_access"
            - "uma_authorization"
            - "ACTIVITI_USER"
          clientRoles:
            account:
              - "manage-account"
              - "view-profile"
          groups:
            - "testgroup"
        - username: testadmin
          enabled: true
          firstName: "testadmin"
          lastName: testadmin
          email: "testadmin@test.com"
          credentials:
            - type: password
              value: password
          realmRoles:
            - "offline_access"
            - "uma_authorization"
            - "ACTIVITI_USER"
            - "ACTIVITI_ADMIN"
          clientRoles:
            account:
              - "manage-account"
              - "view-profile"
          groups:
            - "testgroup"
      extraClients:
        activiti:
          clientId: activiti
          enabled: true
          publicClient: true
          redirectUris:
            - "*"
          webOrigins:
            - "*"
          directAccessGrantsEnabled: true
          implicitFlowEnabled: true
          clientRoles:
            - name: ACTIVITI_USER
              scopeParamRequired: false
              composite: false
              clientRole: true
  keycloak:
    enabled: true
    ingress:
      enabled: false
    postgresql:
      #avoid restarts on upgrades if postgres
      postgresPassword: "keycloak"
      #put back postgresql defaults overridden by AIS chart
      nameOverride: ""
      persistence:
        #AIS expects alfresco-volume-claim from alfresco-infrastructure-deployment
        existingClaim: ""
    keycloak:
      resources:
        limits:
          cpu: 1
          memory: "2048Mi"
        requests:
          cpu: "150m"
          memory: "512Mi"
      username: admin
      password: admin
      #to enable postgres set true and set dbVendor to postgres
      persistence:
        deployPostgres: false
        dbVendor: H2
      livenessProbe:
        initialDelaySeconds: 100
      extraEnv: |
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
      preStartScript: |
        /opt/jboss/keycloak/bin/add-user.sh -u admin -p admin
        /opt/jboss/keycloak/bin/add-user-keycloak.sh -r master -u admin -p admin

## Define custom ingress resource for Keycloak to run on the gateway host domain
ingress:
  enabled: true
  path: "{{ include \"common.keycloak-path\" $ }}" # Uses global.keycloak.path template
  proxyBufferSize: "16k"
  hostName: # overrides global.gateway.host value
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers 'Access-Control-Allow-Methods: "POST, GET, OPTIONS, PUT, PATCH, DELETE"';
      more_set_headers 'Access-Control-Allow-Credentials: true';
      more_set_headers 'Access-Control-Allow-Headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,authorization"';
      more_set_headers 'Access-Control-Allow-Origin: $http_origin';
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"

